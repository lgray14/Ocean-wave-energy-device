from fft_funcs import extracter
import matplotlib.pyplot as plt
import numpy as np

t = [5.567,  5.67,   5.772,  5.87,   5.973,  6.075,  6.177,  6.276,  6.378,  6.48, 6.579, 6.681,  6.784 , 6.886,  6.984,  7.087,  7.189,  7.287,  7.39,   7.492, 7.595,  7.693,  7.795,  7.897,  8., 8.099,  8.201,  8.303,  8.402,  8.504, 8.607,  8.708,  8.807,  8.909,  9.012,  9.114,  9.213,  9.315,  9.417,  9.516, 9.618,  9.72,   9.822,  9.921, 10.023, 10.125, 10.228, 10.327, 10.429, 10.531, 10.63,  10.732, 10.835, 10.936, 11.035, 11.137, 11.24,  11.338, 11.441, 11.543, 11.645, 11.743, 11.846, 11.948, 12.05,  12.149, 12.252, 12.354, 12.456, 12.554, 12.657, 12.759, 12.858, 12.96,  13.062, 13.164, 13.263, 13.365, 13.467, 13.567, 13.669, 13.771, 13.873, 13.971, 14.074, 14.176, 14.275, 14.377, 14.479, 14.582, 14.68,  14.782, 14.885, 14.987, 15.086, 15.188, 15.29,  15.392, 15.491, 15.594]
x = [-0.157, -0.231, -0.295, -0.346, -0.38,  -0.398, -0.397, -0.379, -0.343, -0.292,
 -0.227, -0.152, -0.07,   0.015,  0.099 , 0.179 , 0.251,  0.311 , 0.358,  0.387,
  0.4,    0.394,  0.37,   0.329,  0.274,  0.206,  0.128,  0.045, -0.04,  -0.124,
 -0.201, -0.27,  -0.327, -0.368, -0.393, -0.4,   -0.389, -0.36,  -0.315, -0.255,
 -0.184, -0.104, -0.02,   0.065,  0.147,  0.223,  0.288,  0.34,   0.377,  0.397,
  0.398,  0.382,  0.348, 0.298,  0.235,  0.161,  0.08,  -0.005, -0.09,  -0.17,
 -0.243, -0.305, -0.353, -0.385, -0.399, -0.395, -0.374, -0.335, -0.281, -0.214,
 -0.138, -0.055,  0.03,   0.114,  0.193,  0.263,  0.321,  0.364,  0.391,  0.4,
  0.391,  0.364,  0.321,  0.263,  0.193,  0.114,  0.03, -0.055, -0.138, -0.214,
 -0.281, -0.335, -0.374, -0.395, -0.399,-0.385, -0.353, -0.305, -0.243, -0.17]
k = 1

amplitudes, frequencies = extracter(x, t, k)

print(f"Detected frequency: {np.round(frequencies, 4)} Hz")
print(f"Peak amplitude: {np.round(amplitudes, 4)} m")

plt.plot(t, x, label='Original Signal')
# Reconstruct signal using interpolated values
reconstructed = 0
for i in range(len(frequencies)):
    reconstructed += amplitudes[i]*np.sin(float(2*np.pi*frequencies[i])*np.array(t))
plt.plot(t, reconstructed, 'r--', label='Reconstructed from peak amplitude and frequency')
plt.title('Signal Reconstruction Using Interpolated Peak')
plt.xlabel('Time (s)')
plt.ylabel('Displacement (m)')
plt.legend()

plt.tight_layout()
plt.show()